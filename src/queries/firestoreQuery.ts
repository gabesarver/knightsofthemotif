import { db } from "../../firebase";
import {
  collection,
  onSnapshot,
  addDoc,
  updateDoc,
  doc,
  deleteDoc,
} from "firebase/firestore";

export interface Gold {
  id: string;
  personal_gold: {
    players: {
      [playerName: string]: {
        bank: number;
        on_person: number;
      };
    };
  };
  shared_gold: number;
}

export interface Quest {
  id: string;
  description: string;
  reward: string;
  status: string;
  title: string;
}

export interface Item {
  id?: string;
  name: string;
  quantity: string;
  value: number;
  details: string;
}

// Real-time listener for Quests
export const listenToQuests = (callback: any) => {
  return onSnapshot(collection(db, "quests"), (snapshot) => {
    const quests = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    callback(quests);
  });
};

// Real-time listener for Bag of Holding
export const listenToBagOfHolding = (callback: any) => {
  return onSnapshot(collection(db, "bag_of_holding"), (snapshot) => {
    const items = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    callback(items);
  });
};

export const listenToGold = (callback: any) => {
  return onSnapshot(collection(db, "gold"), (snapshot) => {
    const goldData = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    callback(goldData);
  });
};


// Add a New Quest
export const addQuest = async (quest: any) => {
  await addDoc(collection(db, "quests"), quest);
};

export const updateQuestStatus = async (questId: any, newStatus: any) => {
  try {
    const questRef = doc(db, "quests", questId);
    await updateDoc(questRef, { status: newStatus });
    console.log(`Quest ${questId} status updated to ${newStatus}`);
  } catch (error) {
    console.error("Error updating quest status:", error);
    throw error;
  }
};

// Add an Item to the Bag of Holding, item ID should be generated by Firestore
export const addItemToBag = async (item: any) => {
  await addDoc(collection(db, "bag_of_holding"), item);
};

// Update Gold Amount
export const updateGold = async (goldId: any, newGoldData: any) => {
  const goldDoc = doc(db, "gold", goldId);
  await updateDoc(goldDoc, newGoldData);
};

// Delete a Quest
export const deleteQuest = async (questId: any) => {
  await deleteDoc(doc(db, "quests", questId));
};

// Delete an Item from the Bag of Holding
export const deleteItemFromBag = async (itemId: any) => {
  await deleteDoc(doc(db, "bag_of_holding", itemId));
};

